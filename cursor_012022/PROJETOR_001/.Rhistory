dados = read.csv("turma.csv" , sep = ";")
df42= count(df,sexo)
library("tidyverse")
library(dplyr)
library(tidyr)
dados = read.csv("turma.csv" , sep = ";")
df42= count(df,sexo)
count(dados)
count(dados, graduacao)
count(dados,sexo)
count(dados,salario)
count(dados,pais)
count(dados,nome)
count(dados,idade)
#count pode ser usado para combinar dados de duas colunas
count(dados,pais,graduacao)
count(dados,sexo,pais)
#count pode ser usado com a funcao "filter"
idosos= filter(dados, idade >50)
count(idosos, graduacao)
salarios.altos= filter(dados, salario > 10)
count(salarios.altos,graduacao)
library(tidyverse)
#o pacote dplyt eh parte do tidyverse
#carregando o arquivo starwars, que vem com o pacote
personagens= starwars
View(personagens)
View(personagens)
#FUNCAO FILTER
#filtrando dados
#filter(dados,criterio)
humanos= filter(personagens, species == "Human")
View(humanos)
View(humanos)
robos= filter(personagens, species == "Droid")
View(robos)
View(robos)
#selecionando mais que, usando "AND"
mulheres= filter(personagens, species =="Human"
& gender == "feminine")
View(humanos)
View(mulheres)
#selecionando mais que, usando OR
mulheres.cabelo =filter(mulheres,
hair_color == "black" | hair_color == "brown")
View(mulheres.cabelo)
View(mulheres.cabelo)
#FUNCAO SELECT
#seleciona colunas especificas
select(personagens, name)
select(personagens, name, species)
#selecionando de uma coluna ate outra
select(personagens, name:birth_year)
select(personagens, ends_with("color"))
#select pode mudar ordem de aparecimento das colunas
select(personagens, name, species, everything())
#FUNCAO MUTATE
#adiciona nova coluna, mantem o resto
arquivo =mutate(personagens, altura.metros= height/100)
arquivo
View(arquivo)
View(arquivo)
#FUNCAO TRANSMUTE
#da para criar um arquivo apenas com a coluna que voce criou
arquivo2 =transmute(personagens, altura.metros= height/100)
#FUNCAO ARRANGE
arquivo3 = arrange(personagens, height)
arquivo3
arquivo4 = arrange(personagens, desc(height))
arquivo4
#FUNCAO SUMMARIZE
#apresenta um unico valor
summarise(personagens, altura.media =mean(height, na.rm = T))
especies.altura = summarise(especies, altura.media = mean(height, na.rm = T))
#FUNCAO GROUP_BY + SUMMARIZE
especies= group_by(personagens, species)
especies.altura = summarise(especies, altura.media = mean(height, na.rm = T))
especies.altura
dados = read_csv("grupoescoteiro.csv" , sep =";")
dados = read_csv("grupoescoteiro.csv" , sep =",")
dados = read_csv("grupoescoteiro.csv")
dados = read_csv("grupoescoteiro.csv", sep = ";")
dados
dados = read.csv("grupoescoteiro.csv", sep = ";")
dados
#Q1: Quantas pessoas fazem parte do grupo?
count(dados, escotistas)
summarise(dados)
summarise(dados,escotistas)
df_limpo= distinct(dados)
df_limpo
ramos = count(dados,ramos)
#Q1: Quantas pessoas fazem parte do grupo? #500
dados = read.csv("grupoescoteiro.csv", sep = ";")
dados
ramos = count(dados,ramos)
ramos = count(dados,ramo)
ramos
qtdade_sexo_escoteiros = count(dados,sexo)
qtdade_sexo_escoteiros
View(dados)
View(dados)
castor_elo = filter(dados, progrssao == "Castor Elo")
castor_elo = filter(dados, progressao == "Castor Elo")
castor_elo
minmax_idade = summarise(dados, min(idade), max(idade))
minmax_idade
#Q6: Quantas pessoas tem o número de matrícula menor que 3000? *
matr_3000 = filter(matricula < 3000)
#Q6: Quantas pessoas tem o número de matrícula menor que 3000? *
matr_3000 = filter(dados, matricula < 3000)
count(matr_3000)
#Q7: Quantas pessoas tem o primeiro nome "Ana"? *
anas = filter(dados, escotistas starts_with("Ana"))
#Q7: Quantas pessoas tem o primeiro nome "Ana"? *
anas = filter(dados, escotistas == "Ana")
anas
#Q7: Quantas pessoas tem o primeiro nome "Ana"? *
library("stringr")
nomes = dados$escotistas
achou = str_detect(nomes, nome)
nome = "Ana"
achou = str_detect(nomes, nome)
achou
Anas = dados[achou,]
Anas
count(Anas)
Anas
q8 = filter(Anas, ramo == "seniors" & progressao == "Escalada")
q8
#Q9: A menina "Ana Clara Correia" é de que ramo? *
q9 =  filter(Anas, escotistas == "Ana Clara Correia")
q9
dados
lobinhos = filter(dados, ramo == "lobinhos")
lobinhos
lobinhos_alfa
lobinhos_alfa = arrange(lobinhos, escotistas)
lobinhos_alfa
set.seed(1234)
sorteio = sample_n(lobinhos_alfa,3)
sorteio

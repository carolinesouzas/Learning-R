a
a= read.xls("d_frota_por_uf_municipio_combustivel_dezembro_2020.xlsx")
library(readr)
# entrada de dados
#cat("Qual o seu nome?")
# nome = readline(" O meu nome é :")
rm( list= ls ())
graphics.off()
library(tidyr)
library(dplyr)
install.packages(tidyr)
install.packages(tidyverse)
install.packages("tidyverse")
a= 1+4
a <- 5
b= 4/2
b
a=c (1,2,3)
b= 10
resposta1= dobro(a)
dobro = function(a)
{
tam= length(a)
vetor=0
for (i in 1:tam){
vetor[i] =  2*a[i]
}
return(vetor)
}
triplo= function(b)
{
d=3*b
return(d)
}
reposta2 = tripo(b)
triplo= function(b)
{
d=3*b
return(d)
}
reposta2 = triplo(b)
a=c (1,2,3)
b= 10
resposta1= dobro(a)
print(resposta1)
reposta2 = triplo(b)
a=c (1,2,3)
b= 10
resposta1= dobro(a)
print(resposta1)
resposta2 = triplo(b)
print(resposta2)
#cat pode ser usado para concatenar strings
a= "Um Dois Três"
cat(a,"de Oliveira Quatro")
cat(a,"de Oliveira Quatro\n", "Cinco")
#cat pode ser usado para concatenar strings
a= "Um Dois Três"
cat(a,"de Oliveira Quatro")
cat(a,"de Oliveira Quatro\n", "Cinco")
#cat(a,"de Oliveira Quatro\n")
#readline
a1 = readline ("Digite a sua opção:")
idades= c(56,45,10)
familia= cbind(nomes, idades)
nomes=  c("Joao","Erica","Giovanni")
idades= c(56,45,10)
familia= cbind(nomes, idades)
familia01= as.data.frame(familia)
familia01$nomes
funcionario <- c('Joao', 'Jose', 'Maria')
funcionario
salario <- c(1000,2000,3000)
aniversario <- as.Date(c('2000-01-1','2008-4-26','2007-5-27'))
dados.funcionarios <- data.frame (funcionario,salario,aniversario)
view (dados.funcionarios)
View(dados.funcionarios)
View(dados.funcionarios)
view (dados.funcionarios)
view(dados.funcionarios)
dados.funcionarios$funcionario
dados.funcionarios$salario
dados.funcionarios$aniversario
#carregando bibliotecas de funcoes
install.packages("tidyr")
install.packages("dyplr")
install.packages("Dyplr")
setRepositories()
+
library("Dyplr")
library("dyplr")
library("tidyverse")
install.packages("Dpylr")
install.packages('dplyr', repos = 'https://cloud.r-project.org')
install.packages("dplyr", repos = "https://cloud.r-project.org")
install.packages('dplyr', repos = 'https://cloud.r-project.org')
df = read.csv("turma.csv", sep= ";")
df
library(dplyr)
library(tidyr)
df1= select(df,nome,pais)
view(df)
View(df1)
df3= select(df,starts_with("gr"))
> View(df3)
View(df3)
df6= select(df.c(1,3,5))
df6= select(df,c(1,3,5))
#RENAME : muda o nome de colunas
# Atencao: rename (df,new_name = old_name)
df7= rename(df, pessoa = nome)
View()
View(df7)
#da para selecionar e renomear ao mesmo tempo
df8= select(df,country= pais)
View(df8)
View(df8)
#da para selecionar tudo e renomear alguns, ao mesmo tempo
df9=  select(df, country= pais, everything ())
View(df9)
View(df9)
df10= mutate(de, ano.nascimento= 2021-idade)
df10= mutate(df, ano.nascimento= 2021-idade)
View(df10)
View(df10)
#pode criar varias colunas
df11= mutate(df,ano.nascimento= 2021-idade,media.idades=mean(idade))
View(df11)
View(df11)
notas= c(5,2,3,8,5,6,6,8,3,10,1,4,3,6,5,7,7,9,10)
media_da_turma= mean(nota)
nota= c(5,2,3,8,5,6,6,8,3,10,1,4,3,6,5,7,7,9,10)
media_da_turma= mean(nota)
df12= mutate(df,nota, media_da_turma)
View(df12)
df12= mutate(df,nota, media_da_turma)
nota= c(5,2,3,8,5,6,6,8,3,10,1,4,3,6,5,7,7,9,10,10)
media_da_turma= mean(nota)
df12= mutate(df,nota, media_da_turma)
View(df12)
#FILTER : para manipular linhas, criar nova tabela
#algum criterio
#pode usar<.>,>=,<=, %in%, |, &, !, is.na(), !is.na()
df14= filter(df,nome =='Joao')
View(df14)
View(df14)
df16= filter(df, idade >= 56)
View(df16)
View(df16)
df17= filter(df,idade >= 18 & salario > 10)
View(df17)
View(df17)
#SLICE: separa um conjunto de linhas, baseado na posicao
df19= slice(df,1:5)
View(df19)
View(df19)
df20= slice(df, c(1,3,5,7,9))
View(df20)
#ARRANGE: ordem crescente ou decrescente
df21 = arrange(df,idade)
View(df21)
View(df21)
#pode ordenar mais de um, pela sequencia
df23 = arrange(df, nome, idade)
View(df23)
#DISTINCT: remove as linhas duplicadas
#Vamos duplicar uma tres linhas
#Vamos usar a função slice
tres.linhas = slice(df,1:3)
#agora vamos juntar ao df
duplicado= bind_rows(df, tres.linhas)
duplicado= arrange(duplicado,nome)
View(duplicado)
View(duplicado)
#removendo as linhas duplicadas
df_limpo= distinct(duplicado)
View(df_limpo)
View(df_limpo)
#segundo exemplo
df24= select(df,graduacao, pais)
#segundo exemplo
df24= select(df,graduacao, pais)
df24= arrange(df24, graduacao)
df25= distinct(df24)
#SAMPLE_N
df26= sample_n(df,4)
#percentual, no caso 10%
df27= sample_frac(df,0.1)
View(df27)
#amostragem sem reposicao
df28= sample_n(df,4,replace = F)
View(df28)
#amostragem com reposicao
df29= sample_n(df,10,replace = T)
View(df29)
View(df29)
df30= summarise(df, mean(idade))
View(df30)
View(df30)
df31= summarise(df, mean(idade), min(salario))
View(df31)
View(df31)
df32= summarise(df, rows = n()) #calcula numero de linhas
View(df32)
View(df32)
#N_DISTINCT: numero de elementos diferentes
n_distinct(df)
n_distinct(df$graduacao) #<= determinada coluna dentro do dataframe
n_distinct(df$sexo)
n_distinct(df$pais)
df38
#Separando dataframe em grupo e realizando cálculos com os grupos ( funções "group_by" e "summarise")
#GROUP_BY + SUMMARISE
df38= group_by(df,sexo)
df38
df39= summarise(df38, max(idade),min(idade), max(salario),min(salario))
View(df39)
df40 =group_by(df, pais)
df41 = summarise(df40,max(salario), min(salario))
View(df41)
df40 =group_by(df,graduacao, pais)
df41 = summarise(df40,max(salario), min(salario))
df41 = summarise(df40,max(salario), min(salario))
df40
df41 = summarise(df40,max(salario), min(salario))
View(df40)
df43 = summarise(df40,max(salario), min(salario))
View(df43)
View(df43)
df433 = summarise(df40,max(salario), min(salario))
#Contando o número de elementos distintos em cada coluna ( função "count", pacote "dplyr")
#COUNT:conta linhas
df42= count(df,sexo)
View(df42)
View(df42)
df43= count(df,graduacao)
View(df43)
df44= count(df,pais)
View(df44)
df45= count(df,nome)
View(df45)
library(tidyr)
library(dplyr)
df=read.csv("turma.csv" , sep= ";")
#criando um dataframe
funcionario <- c('Joao', 'Jose', 'Maria')
salario <- c(1000,2000,3000)
aniversario <- as.Date(c('2000-01-1','2008-4-26','2007-5-27'))
dados.funcionarios <- data.frame (funcionario,salario,aniversario)
view(dados.funcionarios)
dados.funcionarios$funcionario
dados.funcionarios$salario
dados.funcionarios$aniversario
#importando um arquivo
#carregando bibliotecas de funcoes
install.packages("tidyr")
install.packages('dplyr', repos = 'https://cloud.r-project.org')
setRepositories()
library("tidyverse")
library(dplyr)
library(tidyr)
df = read.csv("turma.csv", sep= ";")
df
#RESUMO
#SELECT: seleciona colunas
#eh usada com: contains, starts_with, ends_with, num_range, one_of, matches
df1= select(df,nome,pais)
df2= select(df,contains("o"))
df3= select(df,starts_with("gr"))
df4= select(df,ends_with("io"))
df5= select(df,1:3)
df6= select(df,c(1,3,5))
#RENAME : muda o nome de colunas
# Atencao: rename (df,new_name = old_name)
df7= rename(df, pessoa = nome)
#da para selecionar e renomear ao mesmo tempo
df8= select(df,country= pais)
#da para selecionar tudo e renomear alguns, ao mesmo tempo
df9=  select(df, country= pais, everything ())
#MUTATE: cria novas colunas, que podem ser combinacoes
#           de colunas existentes, ou calculo envolvendo colunas
#pode criar uma coluna
df10= mutate(df, ano.nascimento= 2021-idade)
#pode criar varias colunas
df11= mutate(df,ano.nascimento= 2021-idade,media.idades=mean(idade))
nota= c(5,2,3,8,5,6,6,8,3,10,1,4,3,6,5,7,7,9,10,10)
media_da_turma= mean(nota)
df12= mutate(df,nota, media_da_turma)
View(df12)
#TRANSMUTE: cria novas colunas, joga as demais colunas fora
df13= transmute (df,nome, ano.nascimento= 2021-idade)
#FILTER : para manipular linhas, criar nova tabela
#algum criterio
#pode usar<.>,>=,<=, %in%, |, &, !, is.na(), !is.na()
df14= filter(df,nome =='Joao') #2 = é para verificação
df15= filter(df, nome =='Joao' | nome == "Maria") # | é ou
df16= filter(df, idade >= 56)
df17= filter(df,idade >= 18 & salario > 10)
df18= filter(df,sexo == "F")
#SLICE: separa um conjunto de linhas, baseado na posicao
df19= slice(df,1:5)
df20= slice(df, c(1,3,5,7,9))
#ARRANGE: ordem crescente ou decrescente
df21 = arrange(df,idade)
df22 = arrange(df, desc(idade))
#pode ordenar mais de um, pela sequencia
df23 = arrange(df, nome, idade)
#DISTINCT: remove as linhas duplicadas
#Vamos duplicar uma tres linhas
#Vamos usar a função slice
tres.linhas = slice(df,1:3)
#agora vamos juntar ao df
duplicado= bind_rows(df, tres.linhas)
duplicado= arrange(duplicado,nome)
#removendo as linhas duplicadas
df_limpo= distinct(duplicado)
#segundo exemplo
df24= select(df,graduacao, pais)
df24= arrange(df24, graduacao)
df25= distinct(df24)
set.seed(1234)
#SAMPLE_N
df26= sample_n(df,4)
#percentual, no caso 10%
df27= sample_frac(df,0.1)
#amostragem sem reposicao
df28= sample_n(df,4,replace = F)
#amostragem com reposicao
df29= sample_n(df,10,replace = T)
#SUMMARISE: aplica funcoes na colunas e cria tabela com sumario
#combina com min(), max(), mean(), sd(), var(), n(), etc
df30= summarise(df, mean(idade))
df31= summarise(df, mean(idade), min(salario))
df32= summarise(df, rows = n()) #calcula numero de linhas
df33= summarise(df,n()) #mesmo do anterior calcula numero de linhas
#Calculando o número de elementos distintos em uma coluna de um dataframe ( função "n_distinct")
#N_DISTINCT: numero de elementos diferentes
n_distinct(df)
n_distinct(df$graduacao) #<= determinada coluna dentro do dataframe
n_distinct(df$sexo)
n_distinct(df$pais)
#Separando dataframe em grupo e realizando cálculos com os grupos ( funções "group_by" e "summarise")
#GROUP_BY + SUMMARISE
df38= group_by(df,sexo)
df38
df38= summarise(df, n_distinct(graduacao))
df39= summarise(df38, max(idade),min(idade), max(salario),min(salario))
df40 =group_by(df, pais)
df41 = summarise(df40,max(salario), min(salario))
df40 =group_by(df,graduacao, pais)
df40
df433 = summarise(df40,max(salario), min(salario))
#Contando o número de elementos distintos em cada coluna ( função "count", pacote "dplyr")
#COUNT:conta linhas
df42= count(df,sexo)
df43= count(df,graduacao)
df44= count(df,pais)
df45= count(df,nome)
